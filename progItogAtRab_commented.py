import requests                                                          # Импорт библиотеки для HTTP-запросов к API
import json                                                             # Импорт библиотеки для работы с JSON (не используется)
from tkinter import *                                                   # Импорт всех элементов библиотеки для создания графического интерфейса
from tkinter import messagebox as mb                                     # Импорт модуля для сообщений (окна с уведомлениями)
from tkinter import ttk                                                  # Импорт современных виджетов (Combobox, кнопки и т.д.)

# Встроенный словарь с названиями популярных криптовалют на русском языке
crypt_names = {
    "USD": "Доллар США", "EUR": "Евро", "GBP": "Фунт стерлингов", "JPY": "Японская иена",
    "CNY": "Китайский юань", "RUB": "Российский рубль", "CAD": "Канадский доллар",
    "AUD": "Австралийский доллар", "CHF": "Швейцарский франк", "KRW": "Корейская вона",
    "BTC": "Биткоин", "ETH": "Эфириум", "USDT": "Террор доллар", "USDC": "Монета Доллар США",
    "BNB": "Монета Байнанс", "XRP": "Риппл", "ADA": "Кардано", "SOL": "Солана",
    "DOGE": "Догкоин", "DOT": "Полкадот", "MATIC": "Полигон", "SHIB": "Сиба Ину",
    "LTC": "Лайткоин", "BCH": "Биткоин Кэш", "TRX": "Трон", "XMR": "Монеро",
    "TONE": "Тонкоин", "NOT": "Ноткоин", "DOGS": "Собаки", "HMSTR": "Хомяк Комбат",
    "PEPE": "Пепе", "FLOKI": "Флоки Ину", "BONK": "Бонк", "WIF": "Догвифхат"
}


def updete_lable_b(event):                                               # Определяем функцию для обновления метки базовой валюты
    code = b_combobox.get().upper()                                     # Получаем выбранный код валюты из базового combobox и преобразуем в верхний регистр
    name = crypt_names.get(code, code)                                  # Получаем название валюты из словаря, если не найдено - возвращаем сам код
    b_lable.config(text=name)                                           # Обновляем текст метки под базовым combobox на название валюты


def updete_lable_t(event):                                               # Определяем функцию для обновления метки целевой валюты
    code = t_combobox.get().upper()                                     # Получаем выбранный код валюты из целевого combobox и преобразуем в верхний регистр
    name = crypt_names.get(code, code)                                  # Получаем название валюты из словаря, если не найдено - возвращаем сам код
    t_lable.config(text=name)                                           # Обновляем текст метки под целевым combobox на название валюты


# Функция для загрузки списка валют с API Coinbase
def load_currencies():                                                   # Определяем функцию для загрузки списка валют с API
    try:                                                                 # Начинаем блок обработки исключений
        response = requests.get("https://api.coinbase.com/v2/exchange-rates")  # Отправляем GET-запрос к API Coinbase для получения курсов валют
        response.raise_for_status()                                      # Проверяем статус ответа, вызываем исключение при ошибке HTTP
        data = response.json()                                           # Преобразуем JSON-ответ в словарь Python
        # Фильтруем недействительные коды валют
        all_currencies = list(data["data"]["rates"].keys())             # Извлекаем все ключи валют из данных API и преобразуем в список
        valid_currencies = [code for code in all_currencies if code not in ['00', '']]  # Фильтруем недействительные коды валют (исключаем '00' и пустые строки)
        return sorted(valid_currencies)                                  # Возвращаем отсортированный по алфавиту список действительных валют
    except Exception as e:                                               # Ловим любые исключения (ошибки сети, JSON и т.д.)
        result = mb.askyesno("Ошибка", f"Ошибка загрузки: {e}\n\nПовторить попытку?")  # Показываем диалог с вопросом о повторе
        if result:                                                       # Если пользователь нажал "Да"
            return load_currencies()                                     # Рекурсивно вызываем функцию снова (повтор попытки)
        else:                                                            # Если пользователь нажал "Нет"
            # Возвращаем резервный список популярных валют
            return ['BTC', 'ETH', 'USDT', 'USDC', 'BNB', 'XRP', 'ADA', 'SOL', 'DOGE', 'DOT', 'MATIC', 'SHIB', 'LTC', 'BCH', 'TRX', 'XMR', 'TONE', 'NOT', 'DOGS', 'HMSTR', 'PEPE', 'FLOKI', 'BONK', 'WIF']


# Функция для обновления списка в случае ошибки
def retry_load():                                                        # Определяем функцию для принудительного обновления списка валют
    global cripto_list                                                   # Объявляем, что будем использовать глобальную переменную cripto_list
    cripto_list = load_currencies()                                      # Загружаем новый список валют с API
    b_combobox['values'] = cripto_list                                   # Обновляем список в первом combobox (базовая валюта)
    t_combobox['values'] = cripto_list                                   # Обновляем список во втором combobox (целевая валюта)


# Основная функция для выбора двух валют и показа их курса обмена
def exchange():                                                          # Определяем функцию для выполнения обмена валют
    t_code = t_combobox.get().upper()                                    # Получаем код целевой валюты из combobox и преобразуем в верхний регистр
    b_code = b_combobox.get().upper()                                    # Получаем код базовой валюты из combobox и преобразуем в верхний регистр

    if t_code and b_code:                                                # Проверяем, что оба поля заполнены (не пустые)
        try:                                                             # Начинаем блок обработки исключений для API-запроса
            response = requests.get(f"https://api.coinbase.com/v2/exchange-rates?currency={b_code}")  # Отправляем запрос к API с базовой валютой как параметром
            response.raise_for_status()                                  # Проверяем статус HTTP-ответа, вызываем исключение при ошибке
            data = response.json()                                       # Преобразуем JSON-ответ в словарь Python
            if t_code in data["data"]["rates"]:                          # Проверяем, есть ли целевая валюта в полученных курсах
                exchange_rate = float(data["data"]["rates"][t_code])     # Извлекаем курс обмена и преобразуем в число с плавающей точкой
                mb.showinfo("Курс обмена", f"Курс обмена: 1 {b_code} = {exchange_rate:.2f} {t_code}")  # Показываем информационное окно с результатом (округление до 2 знаков)
            else:                                                        # Если целевая валюта не найдена в ответе API
                if t_code not in cripto_list and b_code not in cripto_list:  # Проверяем, есть ли обе валюты в нашем списке
                    mb.showerror("Ошибка", f"Криптовалюта {b_code} и {t_code} не найдены")  # Показываем окно ошибки для обеих валют
                elif t_code not in cripto_list:                         # Проверяем, есть ли целевая валюта в нашем списке
                    mb.showerror("Ошибка", f"Криптовалюта {t_code} не найдена")  # Показываем окно ошибки для целевой валюты
                elif b_code not in cripto_list:                         # Проверяем, есть ли базовая валюта в нашем списке
                    mb.showerror("Ошибка", f"Криптовалюта {b_code} не найдена")  # Показываем окно ошибки для базовой валюты
        except Exception as e:                                           # Ловим любые другие исключения (сетевые ошибки, ошибки парсинга)
            mb.showerror("Ошибка", f"Произошла ошибка: {e}.")            # Показываем общее окно ошибки с описанием
    else:                                                                # Если одно или оба поля пустые
        mb.showwarning("Внимание!", "Введите код криптовалюты.")          # Показываем предупреждающее окно о необходимости заполнить поля


# Функция для фильтрации списка по вводу с клавиатуры
def on_keyrelease(event):                                                # Определяем функцию, которая срабатывает при отпускании клавиши в combobox
    widget = event.widget                                                # Получаем ссылку на виджет, в котором произошло событие
    current_text = widget.get().upper()                                  # Получаем текущий текст из виджета и преобразуем в верхний регистр
    
    # Фильтруем список по введенному тексту
    if current_text:                                                     # Если в поле есть текст
        filtered_list = [item for item in cripto_list if item.startswith(current_text)]  # Создаем отфильтрованный список валют, которые начинаются с введенного текста
        widget['values'] = filtered_list                                 # Обновляем список значений в combobox на отфильтрованный
        
        # Обновляем текст в верхнем регистре
        if widget.get() != current_text:                                 # Если текст в виджете отличается от преобразованного в верхний регистр
            cursor_pos = widget.index(INSERT)                           # Сохраняем текущую позицию курсора
            widget.delete(0, END)                                        # Удаляем весь текст из поля
            widget.insert(0, current_text)                               # Вставляем текст в верхнем регистре
            widget.icursor(cursor_pos)                                   # Восстанавливаем позицию курсора
    else:                                                                # Если поле пустое
        # Восстанавливаем полный список
        widget['values'] = cripto_list                                   # Восстанавливаем полный список валют в combobox

# Основное окно программы
window = Tk()                                                            # Создаем главное окно приложения
window.title("Курс обмена криптовалют")                                  # Устанавливаем заголовок окна
cx = (window.winfo_screenwidth() // 2) - (450 // 2)                     # Вычисляем координату X для центрирования окна по горизонтали
cy = (window.winfo_screenheight() // 2) - (300 // 2)                    # Вычисляем координату Y для центрирования окна по вертикали
window.geometry(f"250x350+{cx}+{cy}")                                   # Устанавливаем размер окна и его позицию на экране

cripto_list = load_currencies()                                          # Загружаем список валют при запуске программы

frame = Frame(relief="ridge", bd=5)                                      # Создаем основной фрейм с рамкой и границей толщиной 5 пикселей
frame.pack(side=LEFT, anchor=NW, padx=10, pady=10)                      # Размещаем фрейм слева вверху с отступами

Label(frame, text="Базовая криптовалюта").pack(padx=10, pady=10)    # Создаем и размещаем метку для базовой валюты с отступами
b_combobox = ttk.Combobox(frame, values=cripto_list, state='normal')  # Создаем combobox для базовой валюты с загруженным списком и возможностью ввода
b_combobox.pack(padx=10, pady=10)                                       # Размещаем combobox с отступами
b_combobox.bind('<KeyRelease>', on_keyrelease)                          # Привязываем событие отпускания клавиши к функции фильтрации
b_combobox.bind("<<ComboboxSelected>>", updete_lable_b)                 # Привязываем событие выбора элемента к функции обновления метки

b_lable = ttk.Label(frame)                                           # Создаем пустую метку для отображения названия базовой валюты
b_lable.pack(padx=10, pady=5)                                           # Размещаем метку с отступами

Label(frame, text="Целевая криптовалюта").pack(padx=10, pady=10)    # Создаем и размещаем метку для целевой валюты с отступами
t_combobox = ttk.Combobox(frame, values=cripto_list, state='normal')  # Создаем combobox для целевой валюты с загруженным списком и возможностью ввода
t_combobox.pack(padx=10, pady=10)                                       # Размещаем combobox с отступами
t_combobox.bind('<KeyRelease>', on_keyrelease)                          # Привязываем событие отпускания клавиши к функции фильтрации
t_combobox.bind("<<ComboboxSelected>>", updete_lable_t)                 # Привязываем событие выбора элемента к функции обновления метки

t_lable = ttk.Label(frame)                                           # Создаем пустую метку для отображения названия целевой валюты
t_lable.pack(padx=10, pady=5)                                           # Размещаем метку с отступами

Button(frame, text="Получить курс обмена", command=exchange).pack(padx=10, pady=5)  # Создаем и размещаем кнопку для получения курса обмена, привязываем к функции exchange
Button(frame, text="Обновить список криптовалют", command=retry_load).pack(padx=10, pady=5)  # Создаем и размещаем кнопку для обновления списка валют, привязываем к функции retry_load

window.mainloop()                                                        # Запускаем главный цикл обработки событий GUI (программа работает до закрытия окна)